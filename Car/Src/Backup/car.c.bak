#include "car.h"

void ServoRotate(SERVO *servo, float angle)
{
  // 占空比与旋转角度换算：t = 0.5ms为0度， 2.5ms为180度
  // 这里只需要90度 等待验证从多少度到多少度。
  // t/T为占空比 T为20ms
  // 设小车向前为90度。则左传为90-22.5=67.5度 右转为90+22.5=112.5度

  assert_param(angle <= 1 && angle >= -1);



  float angle_ = 90 + (angle - 0.5) * 22.5;

  double t = (double) angle_ * 2.5 / 180 / 20;
 
  uint32_t arr = __HAL_TIM_GetAutoreload(servo->servo.htim);

  uint32_t ccr = arr * t;

  __HAL_TIM_SetCompare(servo->servo.htim, servo->servo.channel, ccr);
}


void MotorSignalPower(MOTOR_SIGNAL *motor_signal, float power)
{
  assert_param(motor_signal != NULL);

  uint32_t arr = __HAL_TIM_GetAutoreload(motor_signal->htim);

  assert_param(power >= 0);

  uint32_t ccr = arr * power;

  __HAL_TIM_SetCompare(motor_signal->htim, motor_signal->channel, ccr);
}

void MotorPower(MOTOR *motor, float power)
{
  assert_param(motor != NULL);

  if (power >= 0)
  {
    MotorSignalPower(&motor->signal_a, power);
    MotorSignalPower(&motor->signal_b, 0);
  } else if (power < 0)
  {
    MotorSignalPower(&motor->signal_a, 0);
    MotorSignalPower(&motor->signal_b, power * -1);
  } else {
    MotorSignalPower(&motor->signal_a, power);
    MotorSignalPower(&motor->signal_b, power);
  }
}

void DriverPower(DRIVER *driver, float angle, float power_a, float power_b)
{
  assert_param(driver != NULL);
  ServoRotate(&driver->servo, angle);
  
  MotorPower(&driver->motor_a, power_a);
  MotorPower(&driver->motor_b, power_b);
}
